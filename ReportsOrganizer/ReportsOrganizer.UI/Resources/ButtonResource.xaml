<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls">

    <sys:Double x:Key="FlyoutButtonHeight" x:Shared="False">40</sys:Double>
    <sys:Double x:Key="FlyoutButtonFontSize" x:Shared="False">14</sys:Double>
    <sys:Double x:Key="FlyoutBackButtonWidth" x:Shared="False">40</sys:Double>
    <sys:Double x:Key="FlyoutBackButtonHeight" x:Shared="False">40</sys:Double>

    <Thickness x:Key="FlyoutMenuButtonPadding" x:Shared="False">15,0</Thickness>

    <Storyboard x:Key="FlyoutButtonMouseEnter" x:Shared="False">
        <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                        To="{StaticResource FlyoutButtonBackgroundMouseEnter}"
                        FillBehavior="HoldEnd"
                        Duration="0:0:.15" />
    </Storyboard>
    <Storyboard x:Key="FlyoutButtonMouseLeave" x:Shared="False">
        <ColorAnimation Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                        To="{StaticResource FlyoutButtonBackground}"
                        FillBehavior="HoldEnd"
                        Duration="0:0:.15" />
    </Storyboard>

    <ControlTemplate TargetType="{x:Type Button}" x:Key="FlyoutButtonTemplate" x:Shared="False">
        <Grid Background="{TemplateBinding Background}">
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseEnter}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseLeave}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.GotFocus">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseEnter}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.LostFocus">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseLeave}" />
            </EventTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource FlyoutButtonBackgroundMouseClickBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource FlyoutButtonForegroundMouseClickBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type Button}" x:Key="FlyoutBackButtonTemplate" x:Shared="False">
        <Grid Background="{TemplateBinding Background}"
              Width="{TemplateBinding Width}"
              Height="{TemplateBinding Height}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
            <Viewbox Height="30" HorizontalAlignment="Right">
                <Canvas Height="25" Width="25">
                    <Path Canvas.Right="9" Data="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" Fill="Black" />
                </Canvas>
            </Viewbox>
        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="Button.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseEnter}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseLeave}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.GotFocus">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseEnter}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Button.LostFocus">
                <BeginStoryboard Storyboard="{StaticResource FlyoutButtonMouseLeave}" />
            </EventTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource FlyoutButtonBackgroundMouseClickBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource FlyoutButtonForegroundMouseClickBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="Button" x:Key="FlyoutButton">
        <Setter Property="Width" Value="{StaticResource FlyoutMinWidth}" />
        <Setter Property="Height" Value="{StaticResource FlyoutButtonHeight}" />
        <Setter Property="Background" Value="{StaticResource FlyoutBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource FontForegroundBrush}" />
        <Setter Property="Padding" Value="{StaticResource FlyoutMenuButtonPadding}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <!-- Alignments -->
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- Font styles -->
        <Setter Property="FontSize" Value="{StaticResource FlyoutButtonFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <!--Button template-->
        <Setter Property="Template" Value="{StaticResource FlyoutButtonTemplate}" />
    </Style>

    <Style TargetType="Button" x:Key="FlyoutBackButton">
        <Setter Property="Width" Value="{StaticResource FlyoutBackButtonWidth}" />
        <Setter Property="Height" Value="{StaticResource FlyoutBackButtonHeight}" />
        <Setter Property="Background" Value="{StaticResource FlyoutButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource FontForegroundBrush}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <!-- Alignments -->
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <!-- Button template -->
        <Setter Property="Template" Value="{StaticResource FlyoutBackButtonTemplate}" />
        <!-- Button triggers -->
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             From="0.0" To="1.0"
                                             Duration="0:0:.15" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="White" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MetroWindow}}}" Value="False">
                <Setter Property="Button.Background" Value="{DynamicResource GrayBrush2}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonBase" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource GrayBrush10}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}" />
        <Setter Property="controls:ControlsHelper.CornerRadius" Value="3" />
        <Setter Property="MinHeight" Value="25" />
        <!--<Setter Property="SnapsToDevicePixels" Value="True" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="DisabledVisualElement"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                IsHitTestVisible="False"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <controls:ContentControlEx x:Name="PART_ContentPresenter"
                                                   Margin="{TemplateBinding BorderThickness}"
                                                   Padding="{TemplateBinding Padding}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   RecognizesAccessKey="True"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush8}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource GrayBrush7}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonMouseOverBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="2" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value="0.7" />
                            <Setter TargetName="PART_ContentPresenter" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>